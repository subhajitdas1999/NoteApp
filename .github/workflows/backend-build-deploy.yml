name: Note App backend build and deploy

on:
  push:
    branches:
      - 'main'
jobs:
  test_build:
    runs-on: ubuntu-latest
    environment: development
    defaults:
      run:
        working-directory: ./backend
    env:
      JWT_SECRET: ${{secrets.JWT_SECRET}}
      DB_URL: ${{secrets.DB_URL}}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: use node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: install dependencies
        run: npm install
      - name: run tests
        run: npm test
      - name: build
        run: npm run build

  build_deploy:
    needs: test_build
    if: success()
    runs-on: ubuntu-latest
    environment: development
    defaults:
      run:
        working-directory: ./backend
    env:
      USER_NAME: ${{secrets.USER_NAME}}
      SSH_HOST: ${{secrets.SSH_HOST}}
      SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: use node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: install dependencies
        run: npm install
      - name: Archive Production Artifact
        run: tar -czvf build.tar.gz ./dist
      - name: copy dist file to ec2 server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key

          # Create the directory on the server
          echo "ssh to server to confirm dist folder exist"
          ssh -o StrictHostKeyChecking=no -i private_key $USER_NAME@$SSH_HOST "mkdir -p /home/$USER_NAME/NoteApp/backend/dist"

          # Now copy the files using scp with recursive copy
          echo "scp to server to copy build folder"
          scp -o StrictHostKeyChecking=no -r -i private_key dist/* $USER_NAME@$SSH_HOST:/home/$USER_NAME/NoteApp/backend/dist


      - name: deploy ec2 server
        run: |
          #Now handle all the steps for new code deploy to server
          ssh -o StrictHostKeyChecking=no -i private_key $USER_NAME@$SSH_HOST << 'EOF'

          #set the node environment as I have installed node using nvm
          #This line sets the NVM_DIR environment variable to point to the directory where NVM is installed. By default, NVM installs itself in the .nvm directory inside your home directory.
          export NVM_DIR="$HOME/.nvm"
          # This line sources (or executes) the nvm.sh script located in the NVM_DIR directory. Sourcing this script initializes NVM within the current shell session, making it possible to use the nvm command to switch Node.js versions and ensuring that the correct version of Node.js and npm are accessible.
          source "$NVM_DIR/nvm.sh"

          echo "cd NoteApp/backend"
          cd NoteApp/backend
          
          echo "git pull origin main"
          git pull origin main

          echo "npm install --omit=dev"
          npm install --omit=dev

          echo "pm2 delete noteApp_BE"
          pm2 delete noteApp_BE

          echo "pm2 start "npm run start" --name "noteApp_BE""
          pm2 start "npm run start" --name "noteApp_BE"

          EOF
    
